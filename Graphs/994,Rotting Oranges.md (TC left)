class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        queue<pair<int,int>>q;
        int fresh=0;
        int minutes = 0;

        // Directions: up, down, left, right
        vector<pair<int, int>> directions = {{-1,0},{1,0},{0,-1},{0,1}};
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push({i,j});//push the fire points
                }
                else if(grid[i][j]==1)
                {
                    fresh++;
                }
            }
        }
        if(fresh==0)
        {return 0;}
        
        while(!q.empty()&&fresh>0)
        {   minutes+=1;
            int size=q.size();
            
            for(int i=0;i<size;i++)
            {
                auto [x, y] = q.front();
                 q.pop();
                for(auto[dx,dy]:directions)
                {
                    int nx=x+dx;
                    int ny=y+dy;
 if(nx >= 0 && ny >= 0 && nx < rows && ny < cols && grid[nx][ny] == 1) {
                        grid[nx][ny] = 2; // rot the fresh orange
                        fresh--;
                        q.push({nx, ny});
                }
            }
        }
    }
      return fresh == 0 ? minutes : -1;
}
};
